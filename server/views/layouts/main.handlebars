<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <title>CI</title>
</head>
<body>
<div class="container mt-3 mb-5">
    {{{body}}}
</div>
<script>
    document.addEventListener("DOMContentLoaded", (event) => {
        const form = document.getElementById('form');
        form && form.addEventListener('submit', (e) => {
            e.preventDefault();
            const commitHashInput = document.getElementById('commit_hash');
            const buildCommandInput = document.getElementById('build_command');
            const commitHash = commitHashInput.value;
            const buildCommand = buildCommandInput.value;
            alert('Pending');
            if (commitHash && buildCommand) {
                commitHashInput.value = '';
                buildCommandInput.value = '';
                postData('http://localhost:9000/build', {
                    commit_hash: commitHash,
                    build_command: buildCommand
                })
                    .then(res => {
                        console.log('result: ', res);
                        const { id, status } = res;
                        if (status === 'Occupied') {
                            alert('All servers are occupied. Please try again later');
                            return;
                        }
                        addRow('table', commitHash, status, `build/${id}`);
                        commitHashInput.value = '';
                        buildCommandInput.value = '';
                    })
                    .catch(err => {
                        alert(err);
                        console.log('error: ', err);
                    });
            }
        });
    });

    function postData(url = '', data = {}) {
        return fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json());
    }

    function addRow(tableID, build, status, link) {
        // Get a reference to the table
        const tableRef = document.getElementById(tableID);

        // Insert a row at the end of the table
        const newRow = tableRef.insertRow(-1);

        // Insert a cell in the row at index 0
        const buildCell = newRow.insertCell(0);
        const statusCell = newRow.insertCell(1);
        const linkCell = newRow.insertCell(2);

        const linkEl = document.createElement('a');
        linkEl.href = link ? link : '';
        const linkText = document.createTextNode(link || '');
        linkEl.appendChild(linkText);

        // Append a text node to the cell
        buildCell.appendChild(document.createTextNode(build));
        statusCell.appendChild(document.createTextNode(status));
        linkCell.appendChild(linkEl);
    }
</script>
</body>
</html>
